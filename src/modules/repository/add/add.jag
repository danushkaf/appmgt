<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log("modules/repository/add/add.jag");

var modManager = jagg.module("manager");
var modApplication = jagg.module("application");
var modLifecycle = jagg.module("lifecycle");

var carbon = require('carbon');
var applicationDAO = Packages.org.wso2.carbon.appfactory.core.dao.JDBCApplicationDAO;
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;

function createFork(applicationKey, tenantAwareUserNameArray, type, version) {

    var doForkResult, versionCreationEventResult;
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    var loggedInUserName = jagg.getUser();
    var userNameArray = tenantAwareUserNameArray.toString().split(",");

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);

        for(var i = 0; i < userNameArray.length ; i++){

        log.info("invoking fork for user " + userNameArray[i]);
        

        doForkResult = server.osgiService('org.wso2.carbon.appfactory.repository.mgt.service.RepositoryManagementService').
                createFork(applicationKey, userNameArray[i], type);

        var x = jagg.module("application").getAppVersionsInStages(applicationKey, userNameArray[i], "false", "true", "false");
        var appInfo=parse(x);
        
        var userId = modManager.getTenantAwareUsername(userNameArray[i]);

        for(var appIndex in appInfo ){
                var elementAppInfo=appInfo[appIndex];
                var versions=elementAppInfo.versions;
                for(var index in versions){

                var versionElement=versions[index];

                var key = 'repouser';
                var content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">' +
                '<repouser>' +
                '<key>' + applicationKey + '</key>' +
                '<name>' + userId + '</name>' +
                '<version>' + versionElement.version + '</version>' +
                '<isAutoBuild>' + versionElement.isAutoBuild + '</isAutoBuild>' +
                '<isAutoDeploy>' + versionElement.isAutoDeploy+ '</isAutoDeploy>' +
                '<repoURL>' + doForkResult + '</repoURL>' +
                '<LastBuildStatus> </LastBuildStatus>' +
                '<CurrentBuildStatus> </CurrentBuildStatus>' +
                '<PromoteStatus> </PromoteStatus>' +
                '<lastdeployedid> </lastdeployedid>' +
                '</repouser>' +
                '</metadata>]]>';
                var lifecycleAttribute = 'serviceLifecycle_lifecycleName';
                modLifecycle.addGenericArtifact(key, content, lifecycleAttribute);
                applicationDAO.getInstance().forkApplicationVersion(applicationKey,versionElement.version, userId);
                }

        }
        //Finally notify application management service about the application fork.
        var publishForkRepoEvent = new ws.WSRequest();
        var publishForkRepoOptions = new Array();
        publishForkRepoOptions.useSOAP = 1.1;
        publishForkRepoOptions.action = "urn:publishForkRepository";
        modManager.setAuthHeaders(publishForkRepoOptions);
        
        var forkEventPayload =
            '<ser:publishForkRepository xmlns:ser="http://service.mgt.application.appfactory.carbon.wso2.org">' +
                    '<ser:applicationId>' + applicationKey + '</ser:applicationId>' +
                    '<ser:type>' + type + '</ser:type>' +
                    '<ser:version>' + version + '</ser:version>' +
                    '<ser:userName>' + loggedInUserName + '</ser:userName>' +
		    '<ser:forkedUser>' + userNameArray[i] + '</ser:forkedUser>' +
                    '</ser:publishForkRepository>';
                    
                    
        var publishForkRepoEndpoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
        publishForkRepoEvent.open(publishForkRepoOptions, publishForkRepoEndpoint, true);
        publishForkRepoEvent.send(forkEventPayload);
        if (log.isDebugEnabled()) {
            log.debug("Invoking service endpoint:" + publishForkRepoEndpoint);
        }
        }
        return "true";
    } catch (e) {
        log.error("Error while forking repository\n" + e.message);
        throw "Error while forking repository";
    } finally {
        context.endTenantFlow();
    }
    
};


function createForkBranch(applicationKey, tenantAwareUserNameArray, type, version) {

    var doForkResult, versionCreationEventResult;
    var tenantDomain = modManager.getTenantDomain();
    var context = multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    var loggedInUserName = jagg.getUser();
    var userNameArray = tenantAwareUserNameArray.toString().split(",");

    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);

        for(var i = 0; i < userNameArray.length ; i++){

	        
	        var ret = server.osgiService('org.wso2.carbon.appfactory.repository.mgt.service.RepositoryManagementService') ;
	        doForkResult = ret.createForkBranch(applicationKey, userNameArray[i], type,version);

	        var userId = modManager.getTenantAwareUsername(userNameArray[i]);
	        	        
	        var key = 'repouser';
            var content = '<![CDATA[<metadata xmlns="http://www.wso2.org/governance/metadata">' +
            '<repouser>' +
            '<key>' + applicationKey + '</key>' +
            '<name>' + userId + '</name>' +
            '<version>' + version + '</version>' +
            '<isAutoBuild>true</isAutoBuild>' +
            '<isAutoDeploy>true</isAutoDeploy>' +
            '<repoURL>' + doForkResult + '</repoURL>' +
            '<LastBuildStatus> </LastBuildStatus>' +
            '<CurrentBuildStatus> </CurrentBuildStatus>' +
            '<PromoteStatus> </PromoteStatus>' +
            '<lastdeployedid> </lastdeployedid>' +
            '</repouser>' +
            '</metadata>]]>';
            var lifecycleAttribute = 'serviceLifecycle_lifecycleName';
            modLifecycle.addGenericArtifact(key, content, lifecycleAttribute);
            applicationDAO.getInstance().forkApplicationVersion(applicationKey,version, userId);            
           
	        //Finally notify application management service about the application fork.
	        var publishForkRepoEvent = new ws.WSRequest();
	        var publishForkRepoOptions = new Array();
	        publishForkRepoOptions.useSOAP = 1.1;
	        publishForkRepoOptions.action = "urn:publishForkRepository";
	        modManager.setAuthHeaders(publishForkRepoOptions);
	        
	        
	        var forkEventPayload =
	            '<ser:publishForkRepository xmlns:ser="http://service.mgt.application.appfactory.carbon.wso2.org">' +
	                    '<ser:applicationId>' + applicationKey + '</ser:applicationId>' +
	                    '<ser:type>' + type + '</ser:type>' +
	                    '<ser:version>' + version + '</ser:version>' +
	                    '<ser:userName>' + loggedInUserName + '</ser:userName>' +
			    '<ser:forkedUser>' + userNameArray[i] + '</ser:forkedUser>' +
	                    '</ser:publishForkRepository>';
	                    
	                    
	        var publishForkRepoEndpoint = getProperty(APPFACTORY_SERVER_URL) + "ApplicationManagementService";
	        publishForkRepoEvent.open(publishForkRepoOptions, publishForkRepoEndpoint, true);
	        publishForkRepoEvent.send(forkEventPayload);
	        if (log.isDebugEnabled()) {
	            log.debug("Invoking service endpoint:" + publishForkRepoEndpoint);
	        }
        
        }
        return "true";
    } catch (e) {
        log.error("Error while forking repository\n" + e);
        throw "Error while forking repository";
    } finally {
        context.endTenantFlow();
    }
    
    

};


%>
