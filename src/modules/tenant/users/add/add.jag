<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/tenant/users/add/add.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;

//var appfactory = require('appFactory');
//var multitenancy = carbon.multitenancy;
//var server = require('/modules/server.js');

/*Add user to the tenant domain with a particlualr role*/
var addRolestoUserinTenantDomain = function addUserToTenantDomain(requestersUsername,username,userRole) {

  /*  var tenantDomain=session.get("APPLICATION_INFO").tenantDomain;
    var userManager = server.userManager(server,tenantDomain);
    var user=userManager.getUser(username);
    user.addRoles(userRole);
    */

};

var updateUserRoles = function updateUserRoles(userName,addRoles,removeRols) {
//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var paraAddRoles,paraRemoveRoles;
    paraAddRoles=addRoles.split(",");
    paraRemoveRoles=removeRols.split(",");
    if((paraAddRoles.length==0)||(paraAddRoles[0].length==0)){
        paraAddRoles=null;
    }
    if((paraRemoveRoles.length==0)||(paraRemoveRoles[0].length==0)){
        paraRemoveRoles=null;
    }
    var result;
        var tenantDomain=modManager.getTenantDomain();
        var context = multitenancy.getPrivilegedCarbonContext();
        var tenantManager = multitenancy.getTenantManager();
        try {
            context.startTenantFlow();
            context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
            context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
            result = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService').updateUserRoles(userName,paraAddRoles,paraRemoveRoles);
        } finally {
            context.endTenantFlow();
        }
        return result;
};
var deleteUserFromTenant = function deleteUserFromTenant(userName){
    var isSuccess = "false";
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        isSuccess = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService').removeUserFromTenant(userName);
    }finally{
        context.endTenantFlow();
    }
    return isSuccess;

}

var bulkUserImport = function bulkUserImport(users,defaultPassword){
    var isSuccess = "false";
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    try {
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        isSuccess = server.osgiService('org.wso2.carbon.appfactory.tenant.mgt.service.TenantManagementService').importUsersTotheTenant(users,defaultPassword);
    }finally{
        context.endTenantFlow();
    }
    return isSuccess;
}

var changePassword=function(oldPassword,newPassword){
    var user=jagg.getUser().split('@')[0];
    var tenantDomain=modManager.getTenantDomain();
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager = multitenancy.getTenantManager();
    try {
        var tenantId = tenantManager.getTenantId(tenantDomain);
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager=realm.getUserStoreManager();
        var result=userStoreManager.updateCredential(user,newPassword,oldPassword);
        var claimValue=userStoreManager.setUserClaimValue(user,"http://wso2.org/claims/firstlogin","false",null);

    }catch (e){
         log.error("Error occured while changing password");
         throw "Error occured while changing password";
    }finally{
        context.endTenantFlow();
    }
}


%>

