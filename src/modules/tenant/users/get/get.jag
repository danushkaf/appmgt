<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");

var log = new Log('modules/tenant/users/get/get.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

var getUsersofTenant = function getUsersofTenant() {
//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:getUsersofTenant";
    modManager.setAuthHeaders(options);

    var payload = '<p:getUsersofTenant xmlns:p="http://service.mgt.tenant.appfactory.carbon.wso2.org" />';

    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "TenantManagementService/getUsersofTenant";
    	request.open(options,endPoint, false);
    	request.send(payload);
    	result = request.responseE4X;
    	var ns=new Namespace("http://service.mgt.tenant.appfactory.carbon.wso2.org");
    	var Users = result.ns::["return"];
    	var resultUsers=[];
        for(var i=0;i<Users.length();i++){
        	var user=Users[i];
        	var tmpUser={};
        	var tmpuserName=user.*::["userName"];
            var tmpemail=user.*::["email"];
            var tmpdisplayName=user.*::["displayName"];
            var tmpfirstName=user.*::["firstName"];
            var tmplastName=user.*::["lastName"];
            var tmproles=user.*::["roles"];
            tmpUser.userName=tmpuserName.text();
            var userName=tmpuserName.text();
            tmpUser.email=tmpemail.text();
            tmpUser.displayName=tmpdisplayName.text();
            tmpUser.firstName=tmpfirstName.text();
            tmpUser.lastName=tmplastName.text();
            tmpUser.roles=tmproles.text();
            var tempRoles=tmpUser.roles;
            tmpUser.displayRoles=[];
            for(var ttRole in tempRoles){
                var tmpRole= tempRoles[ttRole];
                var disName=getProperty("TenantRoles.Role." +tmpRole+ ".DisplayName");
                if(tmpRole==ROLE_ADMIN){
                    tmpUser.displayRoles=[];
                    tmpUser.displayRoles.push('Admin');
                    break;
                }
                if(disName!=null){
                    tmpUser.displayRoles.push(disName);
                }
            }


            resultUsers.push(tmpUser);
         }
         session.put('tenantUsers',resultUsers);
       	if(log.isDebugEnabled()){
    		log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
    	}
    } catch (e) {
    	log.error("Error while adding user to tenant \n"+e.message);
    	throw "Error while adding user to application";
    }
    return resultUsers ;
};
var getUserInfo = function getUserInfo(userName) {
//    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "urn:getUserInfo";
    modManager.setAuthHeaders(options);

    var payload = '<p:getUserInfo xmlns:p="http://service.mgt.tenant.appfactory.carbon.wso2.org"><p:userName>'+userName+'</p:userName></p:getUserInfo>';
    var tmpUser={};
    try {
    	var endPoint = getProperty(APPFACTORY_SERVER_URL) + "TenantManagementService/getUsersofTenant";
    	request.open(options,endPoint, false);
    	request.send(payload);
    	result = request.responseE4X;
        var ns=new Namespace("http://service.mgt.tenant.appfactory.carbon.wso2.org");
        var user = result.ns::["return"];
        var tmpuserName=user.*::["userName"];
 
        if(tmpuserName.length()==0){
        	return null;
        }

        var tmpemail=user.*::["email"];
        var tmpdisplayName=user.*::["displayName"];
        var tmpfirstName=user.*::["firstName"];
        var tmplastName=user.*::["lastName"];
        var tmproles=user.*::["roles"];
        tmpUser.userName=tmpuserName.text();
        var userName=tmpuserName.text();
        tmpUser.email=tmpemail.text();
        tmpUser.displayName=tmpdisplayName.text();
        tmpUser.firstName=tmpfirstName.text();
        tmpUser.lastName=tmplastName.text();
        tmpUser.roles=tmproles.text();
        var tempRoles=tmpUser.roles;
        tmpUser.displayRoles=[];
        for(var tempRole in tempRoles){
            tmpUser.displayRoles.push(getProperty("TenantRoles.Role." + tempRoles[tempRole] + ".DisplayName"));
        }

       	if(log.isDebugEnabled()){
    		log.debug("Invoking service endpoint:"+endPoint+" returned result:"+result);
    	}
    	 }
    catch (e) {
    	log.error("Error while retrieving user info for"+userName);
		throw e;
    }
    return tmpUser;
};

var isFirstLogin=function(){
    var user=jagg.getUser().split('@')[0];
    var tenantDomain=modManager.getTenantDomain();
    var tenantManager = multitenancy.getTenantManager();
    try {
        //context.startTenantFlow();
        var tenantId = tenantManager.getTenantId(tenantDomain);
        var realmService = server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realm = realmService.getTenantUserRealm(tenantId);
        var userStoreManager=realm.getUserStoreManager();
        var claimValue=userStoreManager.getUserClaimValue(user,FIRST_LOGIN_CLAIM,null);
        return claimValue;
    }catch (e){
        log.error("Error occured while checking first login status");
        throw "Error occured while checking first login status"
    }
}

var getApplicatioinKeysOfUser=function(userName){
       var appsOfUser;
       var tenantDomain=modManager.getTenantDomain() ;
       var context=multitenancy.getPrivilegedCarbonContext();
       var tenantManager= multitenancy.getTenantManager();
       try{
          context.startTenantFlow();
          context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
          context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
          appsOfUser = server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationUserManagementService').getApplicationKeysOfUser(userName);
       }finally{
          context.endTenantFlow();
       }
       return appsOfUser;
};


%>
