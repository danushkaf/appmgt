<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
include("/jagg/config_reader.jag");


var log = new Log("module/application/users/add/add.jag");

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var appfactory = require('appFactory');
var multitenancy = carbon.multitenancy;


// add the user to the application in LDAP
var addUserToApplication = function addUserToApplication(applicationKey, requestersUsername, newUsername, newUserRole) {
    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var ws = require('ws');
    var request = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.timeout = 1000000;
    options.action = "http://wso2.org/process";
    options["rampart"] = { user : getProperty(ADMIN_USERNAME), userPassword : getProperty(ADMIN_PASSWORD) };
    options["policy"] = <wsp:Policy xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"
			xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"
			wsu:Id="UTOverTransport">
			<wsp:ExactlyOne>
				<wsp:All>
					<sp:TransportBinding
						xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
						<wsp:Policy>
							<sp:TransportToken>
								<wsp:Policy>
									<sp:HttpsToken RequireClientCertificate="false" />
								</wsp:Policy>
							</sp:TransportToken>
							<sp:AlgorithmSuite>
								<wsp:Policy>
									<sp:Basic256 />
								</wsp:Policy>
							</sp:AlgorithmSuite>
							<sp:Layout>
								<wsp:Policy>
									<sp:Lax />
								</wsp:Policy>
							</sp:Layout>
							<sp:IncludeTimestamp />
						</wsp:Policy>
					</sp:TransportBinding>
					<sp:SignedSupportingTokens
						xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
						<wsp:Policy>
							<sp:UsernameToken
								sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient" />
						</wsp:Policy>
					</sp:SignedSupportingTokens>
					<rampart:RampartConfig xmlns:rampart="http://ws.apache.org/rampart/policy">
						<rampart:encryptionUser>useReqSigCert</rampart:encryptionUser>
						<rampart:timestampPrecisionInMilliseconds>true</rampart:timestampPrecisionInMilliseconds>
						<rampart:timestampTTL>300</rampart:timestampTTL>
						<rampart:timestampMaxSkew>300</rampart:timestampMaxSkew>
						<rampart:timestampStrict>false</rampart:timestampStrict>
						<rampart:passwordCallbackClass>org.wso2.carbon.appfactory.common.security.PWCBHandler</rampart:passwordCallbackClass>
						<rampart:tokenStoreClass>org.wso2.carbon.security.util.SecurityTokenStore</rampart:tokenStoreClass>
						<rampart:nonceLifeTime>300</rampart:nonceLifeTime>
					</rampart:RampartConfig>
				</wsp:All>
			</wsp:ExactlyOne>
		</wsp:Policy>;
    var Roles=newUserRole.split(',') ; //role is coming in a comma seperated list
    var rolesString='';
     for(var i=0; i<Roles.length ; i++ ) {
         rolesString =  rolesString + '<roles xmlns="http://wso2.org">' + Roles[i] + '</roles>';
    }
      var payload = '<p:AddUserToApplicationRequest xmlns:p="http://wso2.org"><applicationId xmlns="http://wso2.org">' + applicationKey + '</applicationId><userName xmlns="http://wso2.org">' + newUsername + '</userName>'+rolesString+'</p:AddUserToApplicationRequest>';
      var result;
    try {
        var endPoint = getProperty(BPS_SERVER_URL) + "AddUserToApplication/process";
        request.open(options, endPoint, false);
        request.send(payload);
        result = request.responseE4X;
        result=result.*::["result"].text();
        if(log.isDebugEnabled()){
            log.debug("Invoking service endpoint: "+endPoint+" returned result:"+result);
        }
    } catch (e) {
        log.error("Error while adding user to application \n"+e.message);
        throw "Error while adding user to application";
    }
    return result;
};

var addUserToApplicationWS = function addUserToApplicationWS(applicationKey,users) {
    jagg.module("permission").checkUserActionPermission(applicationKey,PERMISSION_USER_INVITE);
    var tenantDomain=modManager.getTenantDomain() ;
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    var result=false;
    var userNames=users.split(",");
    try{
         context.startTenantFlow();
         context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
         context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
         result = server.osgiService('org.wso2.carbon.appfactory.application.mgt.service.ApplicationUserManagementService').addUsersToApplication(userNames,applicationKey);

    }finally{
         context.endTenantFlow();
    }
    return result;
};
%>
