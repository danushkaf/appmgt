<%
/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include('/jagg/constants.jag');
include('/jagg/config_reader.jag');
jagg.block("server/list", {
    initialize: function (data) {

    },
    getInputs: function () {
        return {
            "applicationKey": null
        }
    },

    getOutputs: function (inputs) {
        var log = new Log();
        var permissionModule = jagg.module("permission");
        var lifecycleModule = jagg.module("lifecycle");
        var logModule = jagg.module("logdownload");
        var applicationKey = request.getParameter("applicationKey");

        var deploymentStages = getProperties(DEPLOYMENT_STAGES);
        var hasPromotePermissions = {};
        var hasDemotePermissions = {};
        var hasVisibilityPermissions = {};

        for (var i = 0; i < deploymentStages.length; i++) {
            var next = lifecycleModule.getNextLifeCycleStage(deploymentStages[i]);
            var prev = lifecycleModule.getPreviousLifeCycleStage(deploymentStages[i]);

            hasPromotePermissions[deploymentStages[i]] = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_GOVERNANCE_PROMOTE_TO + next);

            hasDemotePermissions[deploymentStages[i]] = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_GOVERNANCE_DEMOTE_TO + prev);

            hasVisibilityPermissions[deploymentStages[i]] = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_VISIBILITY_STAGE + deploymentStages[i]);

        }

        var hasRetirePermission = permissionModule.isUserAccessGranted(inputs.applicationKey, PERMISSION_GOVERNANCE_RETIRE);
        var helpTips = jagg.module("help").getHelpTips("server");
        var appVersionsInStages = logModule.getVersionsOfApplicationInStages(jagg.getUser(), applicationKey);

        return {
            "hasPromotePermissions": hasPromotePermissions,
            "hasDemotePermissions": hasDemotePermissions,
            "hasRetirePermission": hasRetirePermission,
            "hasVisibilityPermissions": hasVisibilityPermissions,
            "appVersionsInStages": appVersionsInStages,
	    "helpTips":helpTips

        };
    }


});
%>
